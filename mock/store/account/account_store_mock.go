// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danilotadeu/pismo/store/account (interfaces: Store)

// Package mockStoreAccount is a generated GoMock package.
package mockStoreAccount

import (
	context "context"
	reflect "reflect"

	account "github.com/danilotadeu/pismo/model/account"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (*account.AccountResultQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*account.AccountResultQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAccountByDocumentNumber mocks base method.
func (m *MockStore) GetAccountByDocumentNumber(arg0 context.Context, arg1 string) (*account.AccountCountResultQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByDocumentNumber", arg0, arg1)
	ret0, _ := ret[0].(*account.AccountCountResultQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByDocumentNumber indicates an expected call of GetAccountByDocumentNumber.
func (mr *MockStoreMockRecorder) GetAccountByDocumentNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByDocumentNumber", reflect.TypeOf((*MockStore)(nil).GetAccountByDocumentNumber), arg0, arg1)
}

// GetAllAccounts mocks base method.
func (m *MockStore) GetAllAccounts(arg0 context.Context) ([]*account.AccountResultQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", arg0)
	ret0, _ := ret[0].([]*account.AccountResultQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockStoreMockRecorder) GetAllAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockStore)(nil).GetAllAccounts), arg0)
}

// StoreCreateAccount mocks base method.
func (m *MockStore) StoreCreateAccount(arg0 context.Context, arg1 string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCreateAccount indicates an expected call of StoreCreateAccount.
func (mr *MockStoreMockRecorder) StoreCreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCreateAccount", reflect.TypeOf((*MockStore)(nil).StoreCreateAccount), arg0, arg1)
}
